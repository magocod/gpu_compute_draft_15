/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface MapBlockConfig {
  valueLen: number
  capacity: number
}
export interface MapOptions {
  totalMaps?: number
  blocks: Array<MapBlockConfig>
}
export interface MiniLruCacheConfig {
  capacity: number
}
export interface LruCacheConfig {
  valueLen: number
  capacity: number
}
export interface CacheOptions {
  miniLru?: Array<MiniLruCacheConfig>
  lru?: Array<LruCacheConfig>
}
export interface Collections {
  map?: MapOptions
  cache?: CacheOptions
}
export interface MapClOptions {
  mapId: number
}
export interface Payload {
  key: string
  value: any
}
export interface MetaEntry {
  valueLen: number
  mapId: number
  index: number
}
export declare function sum(a: number, b: number): number
export declare class Device {
  constructor(collections: Collections)
  printMapSrc(): void
  printCacheSrc(): void
  createMap(options: MapClOptions): MapCl
  createMiniLruCache(id: number): MiniLruCache
  createLruCache(id: number): LruCache
}
export declare class LruCache {
  set(key: string, value: any): number
  setMany(input: Array<Payload>): Array<number>
  get(key: string): any
  keys(): Array<string>
  debug(): void
}
export declare class MapCl {
  setMapId(mapId: number): void
  set(key: string, value: any): MetaEntry
  get(key: string): any
  keys(): Array<string>
}
export declare class MiniLruCache {
  set(key: number, value: number): number
  get(key: number): number
  keys(): Array<number>
  debug(): void
}
